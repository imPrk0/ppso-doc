import{_ as e,c as t,a1 as i,o as r}from"./chunks/framework.BG-FXJvp.js";const u=JSON.parse('{"title":"系统设置","description":"","frontmatter":{},"headers":[],"relativePath":"product/config/index.md","filePath":"product/config/index.md","lastUpdated":null}'),l={name:"product/config/index.md"};function o(n,a,d,s,c,p){return r(),t("div",null,a[0]||(a[0]=[i('<h1 id="title" tabindex="-1">系统设置 <a class="header-anchor" href="#title" aria-label="Permalink to &quot;系统设置 {#title}&quot;">​</a></h1><p>除了 <a href="/product/install/env.html">环境变量</a> 为固定的设定外，本程序还有后台设定的功能，可以在后台进行设定。</p><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><p>为了保证程序的运行有最大的性能，本程序也同样的使用了缓存。</p><h3 id="缓存刷新周期" tabindex="-1">缓存刷新周期 <a class="header-anchor" href="#缓存刷新周期" aria-label="Permalink to &quot;缓存刷新周期&quot;">​</a></h3><p>系统设置相关缓存只有以下情况会刷新：</p><ul><li>Redis 或缓存器驱动的生命周期清除了缓存</li><li>管理员改动了设置项</li><li>管理员在网站后台手动清理缓存</li><li>管理员在服务器端删除缓存</li></ul><h3 id="缓存运行机制" tabindex="-1">缓存运行机制 <a class="header-anchor" href="#缓存运行机制" aria-label="Permalink to &quot;缓存运行机制&quot;">​</a></h3><p>程序运行后，任何使用到系统设置内容的都将优先读取缓存，确定缓存内没有时才会请求数据库，读取数据后并 <strong>永久性</strong> 存入缓存。</p><p>当管理员改动了设置项后，程序会自动清除缓存，下次请求到需要系统设置内容时会重新读取数据库并存入缓存。</p>',10)]))}const f=e(l,[["render",o]]);export{u as __pageData,f as default};
